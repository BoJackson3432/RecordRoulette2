RekordRoulette — Agent Mission (Spotify-only v1)

Goal: Build a production-ready MVP of RekordRoulette: a web app that encourages full-album listening by letting users “spin” a roulette/vinyl wheel to get a random album each day.
Provider (v1): Spotify only (Apple Music will be added later).
Core promise: Fun spin → full-album reveal → deep-link to Spotify → track streaks → generate a shareable image.

Stack (opinionated)

Frontend: Next.js 14 (App Router) + TypeScript + Tailwind + Framer Motion

Auth: NextAuth (Spotify provider) with scopes: user-read-email user-library-read

Backend: Next.js API routes

DB: Postgres (Supabase/Neon) via Prisma

Images: Satori + ResVG (server-rendered PNG for share)

Deploy: Vercel or Replit Deployments; DB on Supabase/Neon

Must-have features (v1)

Spotify Sign-in

OAuth flow; store access/refresh tokens securely.

On first login, upsert user in DB.

Spin (Personal Mode)

Fetch user’s saved albums (/me/albums).

Pick a random album the user hasn’t spun in the last 30 days.

Create a Spin record and return album details.

Spinner animation → album reveal page with Play in Spotify deep link.

Mark as Listened + Streaks

POST /api/listened updates Spin.listenedAt.

Streak logic: +1 per calendar day with at least one listened spin; reset if day missed; track longest.

Shareable Image

POST /api/share renders a 1080×1920 PNG: roulette/vinyl frame + album cover + caption “I spun [Album] on RekordRoulette”.

Return the PNG response (and optionally store it).

Pages

Landing with spinner + “Spin Your Album of the Day”.

Spin reveal page with cover, title, artist, year, Play button, Mark as Listened, Share.

Profile page with current streak, longest streak, and recent spins.

Nice-to-have (if time allows)

“Explore” tab (stub only; no Apple/genre filters yet).

Weekly recap card (last 7 spins).

Non-Goals (v1)

Apple Music integration

In-browser Spotify playback (deep-link only)

Group mode, leaderboards, daily global challenge

Data model

User(id, provider='spotify', providerId, displayName, email, avatarUrl, createdAt)

Album(id=spotify id, provider='spotify', name, artist, year, coverUrl, genres[])

Spin(id, userId, mode='personal', seed?, albumId, startedAt, listenedAt?, shareImage?)

Streak(userId, current, longest, lastSpinDate)

API contracts

POST /api/spin → body: { "mode": "personal" }
Response: {"spinId","album":{id,name,artist,year,coverUrl,deepLink}}

GET /api/spins/:spinId → returns spin + album

POST /api/listened → body: { "spinId": "..." } → updates streaks; returns { ok:true, streak:{current,longest} }

POST /api/share → body: { "spinId": "..." } → returns PNG (or {imageUrl} if stored)

UX notes

Landing: roulette/vinyl hybrid spinner; CTA “Spin Your Album of the Day”.

Spin: run spinner 1.8–2.5s while awaiting API; then route to reveal.

Reveal: big album art, metadata, Play button (deep link), Mark as Listened, Share.

RNG & dedupe rules

Prefer albums not spun in last 30 days for that user.

If user library is too small, allow repeats after warning.

Use simple Math.random for v1 (seeded RNG not required yet).

Secrets / env

NEXTAUTH_URL, NEXTAUTH_SECRET

SPOTIFY_CLIENT_ID, SPOTIFY_CLIENT_SECRET

DATABASE_URL

Optional: NEXT_PUBLIC_BASE_URL (for server fetches/OG)

Acceptance checklist (what must work end-to-end)

I can sign in with Spotify and see my profile persisted.

I press Spin, the wheel animates, I land on an album from my saved albums.

The reveal page shows cover + Play in Spotify deep link that opens the album.

I click Mark as Listened and my current streak increases correctly; longest updates if exceeded.

I click Share and receive a valid 1080×1920 PNG with the album art in a roulette/vinyl frame.

Refreshing the site, my recent spins and streak are correct in Profile.

No secrets are logged; errors return friendly JSON with proper HTTP status.

Implementation order (do in this sequence)

Scaffold Next.js + Tailwind + Prisma + NextAuth.

DB schema + migration; user upsert on first auth.

Spotify provider + /me/albums helper; deep-link builder.

POST /api/spin (personal), spinner UI, reveal page.

POST /api/listened + streak calculation + Profile page UI.

POST /api/share with Satori/ResVG placeholder frame.

Error states, empty library fallback, basic tests.

Deploy and verify OAuth callbacks.

Guardrails

Use user-library-read only; don’t fetch or store full listening history.

Respect rate limits; cache minimal album metadata in Album.

Provide a “Delete my data” action (can be a stub that wipes user rows).

Deliverables: a running Replit deployment (or Vercel) with the above endpoints, pages, and flows; repo includes .env.example, README with setup steps, and a short test plan demonstrating the acceptance checklist