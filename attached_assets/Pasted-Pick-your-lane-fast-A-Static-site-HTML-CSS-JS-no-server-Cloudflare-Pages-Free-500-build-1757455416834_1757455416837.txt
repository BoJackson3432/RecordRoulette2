Pick your lane (fast)

A) Static site (HTML/CSS/JS; no server):

Cloudflare Pages (Free) — 500 builds/month, global CDN. Great for “set-and-forget” static sites. 
Cloudflare Docs

Netlify Free — 100 GB bandwidth, 300 build minutes/month; custom domains + SSL. 
netlify.com

GitHub Pages (Free) — dead simple, but static only; repo size guidance applies. 
GitHub Docs
+1

B) Static + light serverless (contact forms, tiny APIs, webhooks):

Netlify + Functions (Free) — included function & edge invocations on free plan. 
netlify.com

Cloudflare Pages + Functions / Workers (Free) — very fast at the edge; note free burst limits. 
Cloudflare Docs
+1

Vercel Hobby (Free) — excellent for Next.js, but free tier is for non-commercial use; upgrade if you monetise. 
Vercel
Northflank

C) Always-on server (Express/Flask/etc.)

Render Free — works, but sleeps/limits; not ideal for production. Paid tiers are cheap if you grow. 
Render

Railway — small monthly credit ($1 after trial); beyond that you pay usage. 
Railway

Fly.io — low-cost VMs, but no perpetual “free forever”; pricing is usage-based. 
Fly
Fly.io
+1

Databases (if you need one):

Supabase Free — generous for prototypes (500 MB DB, 1 GB storage, etc.), Pro starts at ~$25/mo. 
supadex.app
Flexprice

Neon Postgres Free — serverless Postgres with free allowances; good for dev/small apps. 
Neon

Best value for stability: For a basic site or a Next.js static export, Cloudflare Pages or Netlify Free are rock-solid and fast worldwide. Add lightweight functions only if you must.

“No-glitch” setup that won’t surprise your wallet

Prefer static where possible (pre-render pages, call third-party APIs client-side). Static sites on Pages/Netlify are extremely stable. 
Cloudflare Docs
netlify.com

If you need a backend, keep it serverless + stateless (short functions, cache aggressively).

Avoid “keep-alive” pings to stop sleeping—some hosts disallow this and may suspend apps. If you truly need always-on, use a tiny paid instance on Render/Fly. 
Reddit

Put secrets in the host’s environment variables, not in Git.

Add an uptime monitor (just for alerting, not to keep it awake).

Quick migration from Replit → GitHub → Free host
Option 1: Cloudflare Pages (static or static-first Next.js)

In Replit, open the Shell:

git init
git add .
git commit -m "init"
git branch -M main


Create a new empty repo on GitHub, then:

git remote add origin https://github.com/<you>/<repo>.git
git push -u origin main


In Cloudflare Pages: Create Project → Connect to Git → pick repo.

Build command (examples):

React/Vite: npm ci && npm run build

Next.js (static export): npm ci && npm run build && npm run export

Output directory:

Vite/React: dist

Next export: out

Set environment variables in Pages → Settings → Environment variables (if needed).

Deploy. Free plan gives 500 builds/month and global edge. 
Cloudflare Docs

Option 2: Netlify (static or with Functions)

Push to GitHub as above.

In Netlify: Add new site → Import from Git → pick repo.

Set build command & publish directory (e.g., npm run build / dist).

If you need serverless endpoints, put files in netlify/functions/*.js and enable Functions. Free plan includes generous monthly limits. 
netlify.com

Option 3: Vercel (Next.js with serverless routes)

Push to GitHub.

Vercel → New Project → import repo. It auto-detects Next.js.

If your project is commercial, plan for Pro (£/mo) because Hobby is non-commercial. 
Vercel
Northflank

Option 4: You truly need a tiny always-on server

Render: “Web Service → Free” to start; expect sleep/limits; upgrade if traffic grows. 
Render

Railway/Fly: cheap, but be mindful of usage and credits. 
Railway
Fly

Which should you choose?

Basic marketing site / portfolio / landing page: Cloudflare Pages or Netlify (free). Fast, reliable, trivial to maintain. 
Cloudflare Docs
netlify.com

Next.js app with minimal APIs (login, contact): Netlify (Functions) or Cloudflare Pages + Functions. Use Vercel Pro only if you’re monetising and want first-class Next.js DX. 
netlify.com
Cloudflare Docs
Northflank

API + DB with low traffic: Netlify/Cloudflare front-end + Supabase/Neon for DB/auth/storage (free tiers). 
supadex.app
Neon

Persistent backend process (queues, websockets, long jobs): Start on Render’s cheapest paid instance or Fly.io micro to avoid cold starts. 
Render
Fly